import sys
print(sys.path)
import pandas as pd
import matplotlib.pylab as plt
data = pd.read_csv('AirPassengers.csv')
print(data)
print('\n Data Types:')
print(data.dtypes)
con=data['Month']
data['Month']=pd.to_datetime(data['Month'])
#data.set_index('Month', inplace=True)
pasajeros=data.set_index('Month')
#check datatype of index
#convert to time series:
ts = pasajeros['NPassengers']
ts.head(10)
####Graficar la Serie#####
#plt.plot(ts)
#plt.title('AirPassengers')
#plt.show()
pasajeros.index.freq='MS'
import sys
print(sys.path)
import pandas as pd
import matplotlib.pylab as plt
data = pd.read_csv('AirPassengers.csv')
print(data)
print('\n Data Types:')
print(data.dtypes)
con=data['Month']
data['Month']=pd.to_datetime(data['Month'])
#data.set_index('Month', inplace=True)
pasajeros=data.set_index('Month')
#check datatype of index
#convert to time series:
ts = pasajeros['NPassengers']
ts.head(10)
####Graficar la Serie#####
#plt.plot(ts)
#plt.title('AirPassengers')
#plt.show()
ts.index.freq
pasajeros.index.freq='MS'
ts.index.freq='MS'
ts.index
#####Transformación Box-Cox
import scipy as sp
import scipy.stats ####En ocasiones puede funcionar la línea 46 sin ésta línea.
print(sp.stats.boxcox(ts,alpha=0.05))
sp.stats.boxcox(data['NPassengers'],alpha=0.05)
logAirp=sp.stats.boxcox(data['NPassengers'],lmbda=0)
data = data.assign(logAirp=logAirp)
logpasajeros=data.set_index('Month')
logAirPass=  logpasajeros['logAirp']
plt.plot(logAirPass)
plt.show()
sp.stats.boxcox(logAirp,alpha=0.05)
###Note que la transformación Box-Cox si sutión efecto.
quit()
reticulate::repl_python()
library(TSstudio)
library(astsa)
data("soi")
ts_info(soi)
?soi
par(mar = c(2,2,2,2))
plot(soi, main="Indice soi")
par(mar = c(3,2,3,2))
astsa::lag1.plot(soi, 12)  ###El 12 indica cuantos retardos y_t-k contra y_t
###Hacer la gráfica con x11()
library(TSstudio)
data(USUnRate)
ts_info(USUnRate)
plot(USUnRate,main = "US Monthly Unemployment Rate",ylab="Unemployment Rate (%)")
library(readxl)
library(tidyverse)
DesempleoyEmpleo <- read_excel("DesempleoyEmpleo.xlsx", range="A9:C249")
str(DesempleoyEmpleo)
DesempleoyEmpleo_1=DesempleoyEmpleo %>% map_df(rev)
tail(DesempleoyEmpleo)
head(DesempleoyEmpleo_1)
library(astsa)
library(TSstudio)
data(chicken)
ts_info(chicken)
plot(chicken,main="Precio Mensual de la Libra de Pollo en Estados Unidos", ylab="Precio en Centavos de Dólar")
#ts_plot(chicken)
summary(fit <- lm(chicken~time(chicken), na.action=NULL))
plot(chicken, ylab="centavos por libra")
abline(fit,col = "red") # Se añade la recta ajusta
###Eliminamos la tendencia con la predicción la recta
ElimiTendchick=chicken-predict(fit)
plot(ElimiTendchick,main="Serie Chicken Sin tendencia")
time(chicken)
time(chicken)
time(chicken)[1:10]
library(astsa)
library(TSstudio)
data(chicken)
ts_info(chicken)
plot(chicken,main="Precio Mensual de la Libra de Pollo en Estados Unidos", ylab="Precio en Centavos de Dólar")
#ts_plot(chicken)
summary(fit <- lm(chicken~time(chicken), na.action=NULL))
plot(chicken, ylab="centavos por libra")
abline(fit,col = "red") # Se añade la recta ajusta
###Eliminamos la tendencia con la predicción la recta
ElimiTendchick=chicken-predict(fit)
plot(ElimiTendchick,main="Serie Chicken Sin tendencia")
time(chicken)[1:10]
2001+1/12
2001+2/12
2001+7/12
2001+8/12
2001+9/12
set.seed(154)
w = rnorm(200); x = cumsum(w)
wd = w +.2; xd = cumsum(wd)
plot.ts(xd, ylim=c(-5,55), main="Caminata Aletoria", ylab='')
lines(x, col=4); abline(h=0, col=4, lty=2); abline(a=0, b=.2, lty=2)
par(mar = c(2,2,2,2))
fit = lm(chicken~time(chicken), na.action=NULL) # Regresión sobre el tiempo
par(mfrow=c(2,1))
plot(resid(fit), type="l", main="sin tendencia")
plot(diff(chicken), type="l", main="Primera Diferencia")
x11()
par(mar = c(3,2,3,2))
par(mfrow=c(3,1)) # plot ACFs
acf(chicken, 48, main="ACF Pollo")
acf(resid(fit), 48, main="ACF Sin tendencia")
acf(diff(chicken), 48, main="ACF Primera Diferencia")
x11()
data("AirPassengers")
plot(AirPassengers)
data("AirPassengers")
plot(AirPassengers)
#####Transformación Box-Cox
library(FitAR)
library(forecast)
forecast::BoxCox.lambda(AirPassengers, method = "guerrero", lower = 0, upper = 2) ###Me entrega el valor de lambda
forecast::BoxCox.lambda(AirPassengers, method = "guerrero", lower = -1, upper = 2) ###Me entrega el valor de lambda
forecast::BoxCox.lambda(AirPassengers, method = "guerrero", lower = 0.5, upper = 2) ###Me entrega el valor de lambda
forecast::BoxCox.lambda(AirPassengers, method = "guerrero", lower = -1, upper = 3) ###Me entrega el valor de lambda
FitAR::BoxCox(AirPassengers)
data("AirPassengers")
plot(AirPassengers)
#####Transformación Box-Cox
library(FitAR)
library(forecast)
forecast::BoxCox.lambda(AirPassengers, method = "guerrero", lower = -1, upper = 3) ###Me entrega el valor de lambda
##method="loglik"
FitAR::BoxCox(AirPassengers)###Me entrega una gráfica
lAirPass=log(AirPassengers)
par(mar = c(3,2,3,2))
par(mfrow=c(2,1))
plot(AirPassengers,main="Serie de Pasajeros sin Transformar")
x11()
par(mar = c(3,2,3,2))
par(mfrow=c(2,1))
plot(AirPassengers,main="Serie de Pasajeros sin Transformar")
plot(lAirPass,main="Series con Trnaformación BoxCox")
?BoxCox
forecast::BoxCox(AirPassengers,lambda=0)
forecast::BoxCox(AirPassengers,lambda=-0.294731)
plot(forecast::BoxCox(AirPassengers,lambda=-0.294731))
FitAR::BoxCox(lAirPass)
forecast::BoxCox.lambda(lAirPass, method = "guerrero", lower = -1, upper = 2)
library(knitr)
library(reticulate)
use_condaenv(condaenv = "Python38andR", conda = "auto", required = TRUE)
#pandas=import("pandas")
knitr::knit_engines$set(python = reticulate::eng_python)
reticulate::repl_python()
ts.index.freq
reticulate::repl_python()
reticulate::repl_python()
